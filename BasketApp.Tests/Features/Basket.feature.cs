// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BasketApp.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BasketFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Basket.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Basket", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Basket")))
            {
                global::BasketApp.Tests.Features.BasketFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Apply a single gift voucher to a basket of two items")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basket")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mytag")]
        public virtual void ApplyASingleGiftVoucherToABasketOfTwoItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apply a single gift voucher to a basket of two items", null, new string[] {
                        "mytag"});
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Category"});
            table1.AddRow(new string[] {
                        "Hat",
                        "10.50",
                        "Clothes"});
            table1.AddRow(new string[] {
                        "Jumper",
                        "54.65",
                        "Clothes"});
#line 8
 testRunner.Given("I have added the following items to my basket", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "VoucherCode",
                        "Discount"});
            table2.AddRow(new string[] {
                        "XXX-XXX",
                        "5.00"});
#line 12
 testRunner.When("I apply the following gift vouchers", ((string)(null)), table2, "When ");
#line 15
 testRunner.Then("The total price should be 60.15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
 testRunner.And("There should be no error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Apply a single offer voucher to a basket that meets the threshold")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basket")]
        public virtual void ApplyASingleOfferVoucherToABasketThatMeetsTheThreshold()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apply a single offer voucher to a basket that meets the threshold", null, ((string[])(null)));
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Category"});
            table3.AddRow(new string[] {
                        "Hat",
                        "25.00",
                        "Clothes"});
            table3.AddRow(new string[] {
                        "Jumper",
                        "26.00",
                        "Clothes"});
#line 19
 testRunner.Given("I have added the following items to my basket", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "VoucherCode",
                        "Discount",
                        "Threshold"});
            table4.AddRow(new string[] {
                        "YYY-YYY",
                        "5.00",
                        "50.00"});
#line 23
 testRunner.When("I apply the following offer vouchers", ((string)(null)), table4, "When ");
#line 26
 testRunner.Then("The total price should be 46.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.And("There should be no error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Apply a single gift voucher and offer voucher to a basket that meets the discount" +
            " threshold")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basket")]
        public virtual void ApplyASingleGiftVoucherAndOfferVoucherToABasketThatMeetsTheDiscountThreshold()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apply a single gift voucher and offer voucher to a basket that meets the discount" +
                    " threshold", null, ((string[])(null)));
#line 29
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Category"});
            table5.AddRow(new string[] {
                        "Hat",
                        "25.00",
                        "Clothes"});
            table5.AddRow(new string[] {
                        "Jumper",
                        "26.00",
                        "Clothes"});
#line 30
 testRunner.Given("I have added the following items to my basket", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "VoucherCode",
                        "Discount"});
            table6.AddRow(new string[] {
                        "XXX-XXX",
                        "5.00"});
#line 34
 testRunner.When("I apply the following gift vouchers", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "VoucherCode",
                        "Discount",
                        "Threshold"});
            table7.AddRow(new string[] {
                        "YYY-YYY",
                        "5.00",
                        "50.00"});
#line 37
 testRunner.And("I apply the following offer vouchers", ((string)(null)), table7, "And ");
#line 40
 testRunner.Then("The total price should be 41.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.And("There should be no error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Apply a single category offer voucher to a basket with qualifying items that meet" +
            "s the threshold")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basket")]
        public virtual void ApplyASingleCategoryOfferVoucherToABasketWithQualifyingItemsThatMeetsTheThreshold()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apply a single category offer voucher to a basket with qualifying items that meet" +
                    "s the threshold", null, ((string[])(null)));
#line 43
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Category"});
            table8.AddRow(new string[] {
                        "Hat",
                        "25.00",
                        "Clothes"});
            table8.AddRow(new string[] {
                        "Jumper",
                        "26.00",
                        "Clothes"});
            table8.AddRow(new string[] {
                        "Head Light",
                        "3.50",
                        "Head Gear"});
#line 44
 testRunner.Given("I have added the following items to my basket", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "VoucherCode",
                        "Discount",
                        "ProductCategory",
                        "Threshold"});
            table9.AddRow(new string[] {
                        "YYY-YYY",
                        "5.00",
                        "Head Gear",
                        "50.00"});
#line 49
 testRunner.When("I apply the following category offer vouchers", ((string)(null)), table9, "When ");
#line 52
 testRunner.Then("The total price should be 51.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 53
 testRunner.And("There should be no error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Apply a single category offer voucher to a basket with no qualifying items")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basket")]
        public virtual void ApplyASingleCategoryOfferVoucherToABasketWithNoQualifyingItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apply a single category offer voucher to a basket with no qualifying items", null, ((string[])(null)));
#line 55
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Category"});
            table10.AddRow(new string[] {
                        "Hat",
                        "25.00",
                        "Clothes"});
            table10.AddRow(new string[] {
                        "Jumper",
                        "26.00",
                        "Clothes"});
#line 56
 testRunner.Given("I have added the following items to my basket", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "VoucherCode",
                        "Discount",
                        "ProductCategory"});
            table11.AddRow(new string[] {
                        "YYY-YYY",
                        "5.00",
                        "Head Gear"});
#line 60
 testRunner.When("I apply the following category offer vouchers", ((string)(null)), table11, "When ");
#line 63
 testRunner.Then("The total price should be 51.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
 testRunner.And("The error message should be \"There are no products in your basket applicable to v" +
                    "oucher YYY-YYY.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Apply a single category offer voucher to a basket with qualifying items that does" +
            "n\'t meet the threshold")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basket")]
        public virtual void ApplyASingleCategoryOfferVoucherToABasketWithQualifyingItemsThatDoesntMeetTheThreshold()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apply a single category offer voucher to a basket with qualifying items that does" +
                    "n\'t meet the threshold", null, ((string[])(null)));
#line 66
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Category"});
            table12.AddRow(new string[] {
                        "Hat",
                        "25.00",
                        "Clothes"});
            table12.AddRow(new string[] {
                        "Jumper",
                        "26.00",
                        "Clothes"});
            table12.AddRow(new string[] {
                        "Head Light",
                        "3.50",
                        "Head Gear"});
#line 67
 testRunner.Given("I have added the following items to my basket", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "VoucherCode",
                        "Discount",
                        "ProductCategory",
                        "Threshold"});
            table13.AddRow(new string[] {
                        "YYY-YYY",
                        "5.00",
                        "Head Gear",
                        "70.00"});
#line 72
 testRunner.When("I apply the following category offer vouchers", ((string)(null)), table13, "When ");
#line 75
 testRunner.Then("The total price should be 54.50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.And("The error message should be \"You have not reached the spend threshold for the vou" +
                    "cher YYY-YYY. Spend another £15.51 to receive the £5.00 discount from your baske" +
                    "t total.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Apply an offer voucher to a basket with a gift voucher item")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basket")]
        public virtual void ApplyAnOfferVoucherToABasketWithAGiftVoucherItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apply an offer voucher to a basket with a gift voucher item", null, ((string[])(null)));
#line 78
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Category"});
            table14.AddRow(new string[] {
                        "Hat",
                        "25.00",
                        "Clothes"});
            table14.AddRow(new string[] {
                        "Gift Voucher",
                        "30.00",
                        "Gift Vouchers"});
#line 79
 testRunner.Given("I have added the following items to my basket", ((string)(null)), table14, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "VoucherCode",
                        "Discount",
                        "Threshold"});
            table15.AddRow(new string[] {
                        "YYY-YYY",
                        "5.00",
                        "50.00"});
#line 83
 testRunner.When("I apply the following offer vouchers", ((string)(null)), table15, "When ");
#line 86
 testRunner.Then("The total price should be 55.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
 testRunner.And("The error message should be \"You have not reached the spend threshold for the vou" +
                    "cher YYY-YYY. Spend another £25.01 to receive the £5.00 discount from your baske" +
                    "t total.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Apply two valid offer vouchers to the same basket")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basket")]
        public virtual void ApplyTwoValidOfferVouchersToTheSameBasket()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apply two valid offer vouchers to the same basket", null, ((string[])(null)));
#line 89
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Category"});
            table16.AddRow(new string[] {
                        "Hat",
                        "25.00",
                        "Clothes"});
            table16.AddRow(new string[] {
                        "Jumper",
                        "26.00",
                        "Clothes"});
#line 90
 testRunner.Given("I have added the following items to my basket", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "VoucherCode",
                        "Discount",
                        "Threshold"});
            table17.AddRow(new string[] {
                        "YYY-YYY",
                        "5.00",
                        "50.00"});
            table17.AddRow(new string[] {
                        "ZZZ-ZZZ",
                        "5.00",
                        "50.00"});
#line 94
 testRunner.When("I apply the following offer vouchers", ((string)(null)), table17, "When ");
#line 98
 testRunner.Then("The total price should be 46.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 99
 testRunner.And("The error message should be \"You can only use one offer voucher at a time.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Apply a single offer voucher to a basket that meets the threshold and then remove" +
            " an item so the basket doesn\'t meet the threshold")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basket")]
        public virtual void ApplyASingleOfferVoucherToABasketThatMeetsTheThresholdAndThenRemoveAnItemSoTheBasketDoesntMeetTheThreshold()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apply a single offer voucher to a basket that meets the threshold and then remove" +
                    " an item so the basket doesn\'t meet the threshold", null, ((string[])(null)));
#line 101
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Category"});
            table18.AddRow(new string[] {
                        "Hat",
                        "25.00",
                        "Clothes"});
            table18.AddRow(new string[] {
                        "Jumper",
                        "26.00",
                        "Clothes"});
#line 102
 testRunner.Given("I have added the following items to my basket", ((string)(null)), table18, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "VoucherCode",
                        "Discount",
                        "Threshold"});
            table19.AddRow(new string[] {
                        "YYY-YYY",
                        "5.00",
                        "50.00"});
#line 106
 testRunner.When("I apply the following offer vouchers", ((string)(null)), table19, "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Category"});
            table20.AddRow(new string[] {
                        "Hat",
                        "25.00",
                        "Clothes"});
#line 109
 testRunner.And("I then remove the following item from the basket", ((string)(null)), table20, "And ");
#line 112
 testRunner.Then("The total price should be 26.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 113
 testRunner.And("The error message should be \"You have not reached the spend threshold for the vou" +
                    "cher YYY-YYY. Spend another £24.01 to receive the £5.00 discount from your baske" +
                    "t total.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
